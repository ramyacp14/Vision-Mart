USE database VISION
CREATE schema VISIONMUSIC
USE schema VISIONMUSIC
-- Table: Tracks
CREATE TABLE IF NOT EXISTS TRACKS (
    TRACK_ID INT NOT NULL,
    ARTIST_ID INT NOT NULL,
    TRACK_NAME VARCHAR(50) NOT NULL,
    TRACK_DURATION TIMESTAMP NOT NULL,
    TRACK_POPULARITY INT NULL,
    TRACK_DANCEABILITY FLOAT NULL,
    TRACK_ENERGY FLOAT NULL,
    TRACK_BPM FLOAT NULL,
    TRACK_LOUDNESS FLOAT NULL,
    TRACK_LIVENESS FLOAT NULL,
    TRACK_GENRE VARCHAR(20) NULL,
    CONSTRAINT PK_TRACKS PRIMARY KEY (TRACK_ID)
);

-- Table: Artists
CREATE TABLE IF NOT EXISTS ARTISTS (
    ARTIST_ID INT NOT NULL,
    ARTIST_NAME VARCHAR(20) NOT NULL,
    ARTIST_POPULARITY FLOAT NULL,
    ARTIST_FOLLOWERS FLOAT NULL,
    NO_OF_TRACKS INT NULL,
    ONE_BILLION_STREAMING INT NULL,
    HUNDRED_MILLION_STREAMING INT NULL,
    CONSTRAINT PK_ARTISTS PRIMARY KEY (ARTIST_ID)
);

-- Table: Music_Customers
CREATE TABLE IF NOT EXISTS MUSIC_CUSTOMERS (
    CUSTOMER_ID INT NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    CONSTRAINT PK_MUSIC_CUSTOMERS PRIMARY KEY (CUSTOMER_ID)
);

-- Table: Membership_Billing
CREATE TABLE IF NOT EXISTS MEMBERSHIP_BILLING (
    BILLING_ID INT NOT NULL,
    MEMBERSHIP_DATE DATE NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    MEMBERSHIP_ID INT NOT NULL,
    CONSTRAINT PK_MEMBERSHIP_BILLING PRIMARY KEY (BILLING_ID)
);

-- Table: Albums
CREATE TABLE IF NOT EXISTS ALBUMS (
    ALBUM_ID INT NOT NULL,
    ARTIST_ID INT NOT NULL,
    ALBUM_NAME VARCHAR(50) NOT NULL,
    RELEASE_DATE DATE NULL,
    CONSTRAINT PK_ALBUMS PRIMARY KEY (ALBUM_ID)
);

-- Table: Playlists
CREATE TABLE IF NOT EXISTS PLAYLISTS (
    PLAYLIST_ID INT NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    PLAYLIST_NAME VARCHAR(50) NOT NULL,
    CONSTRAINT PK_PLAYLISTS PRIMARY KEY (PLAYLIST_ID)
);

-- Table: Playlist_Tracks
CREATE TABLE IF NOT EXISTS PLAYLIST_TRACKS (
    PLAYLIST_ID INT NOT NULL,
    TRACK_ID INT NOT NULL,
    LIKE_DATE_TIME TIMESTAMP NOT NULL,
    CONSTRAINT PK_PLAYLIST_TRACKS PRIMARY KEY (PLAYLIST_ID, TRACK_ID)
);

-- Table: Membership
CREATE TABLE IF NOT EXISTS MEMBERSHIP (
    MEMBERSHIP_ID INT NOT NULL,
    MEMBERSHIP_NAME VARCHAR(20) NOT NULL,
    PRICE DECIMAL(10, 2) NOT NULL,
    EXPIRY_DATE DATE NOT NULL,
    CONSTRAINT PK_MEMBERSHIP PRIMARY KEY (MEMBERSHIP_ID)
);

-- Table: Likes
CREATE TABLE IF NOT EXISTS LIKES (
    CUSTOMER_ID INT NOT NULL,
    TRACK_ID INT NOT NULL,
    LIKE_DATE_TIME TIMESTAMP NOT NULL,
    CONSTRAINT PK_LIKES PRIMARY KEY (CUSTOMER_ID, TRACK_ID)
);

-- Table: Followers
CREATE TABLE IF NOT EXISTS FOLLOWERS (
    CUSTOMER_ID INT NOT NULL,
    ARTIST_ID INT NOT NULL,
    CONSTRAINT PK_FOLLOWERS PRIMARY KEY (CUSTOMER_ID, ARTIST_ID)
);

-- Table: Songs_Played
CREATE TABLE IF NOT EXISTS SONGS_PLAYED (
    TRACK_ID INT NOT NULL,
    DATE_TIME TIMESTAMP NOT NULL,
    CONSTRAINT PK_SONGS_PLAYED PRIMARY KEY (TRACK_ID, DATE_TIME)
);

-- Table: Music_Plans
CREATE TABLE IF NOT EXISTS MUSIC_PLANS (
    PLAN_ID INT NOT NULL,
    PLAN_NAME VARCHAR(50) NOT NULL,
    PLAN_PRICE DECIMAL(5, 2) NOT NULL,
    PLAN_CURRENT BOOLEAN NOT NULL,
    DISCOUNT DECIMAL(5, 2) NULL,
    CONSTRAINT PK_MUSIC_PLANS PRIMARY KEY (PLAN_ID)
);

-- Foreign Keys
ALTER TABLE TRACKS ADD CONSTRAINT FK_TRACKS_ARTISTS
    FOREIGN KEY (ARTIST_ID)
    REFERENCES ARTISTS (ARTIST_ID);

ALTER TABLE ALBUMS ADD CONSTRAINT FK_ALBUMS_ARTISTS
    FOREIGN KEY (ARTIST_ID)
    REFERENCES ARTISTS (ARTIST_ID);

ALTER TABLE PLAYLISTS ADD CONSTRAINT FK_PLAYLISTS_MUSIC_CUSTOMERS
    FOREIGN KEY (CUSTOMER_ID)
    REFERENCES MUSIC_CUSTOMERS (CUSTOMER_ID);

ALTER TABLE LIKES ADD CONSTRAINT FK_LIKES_TRACKS
    FOREIGN KEY (TRACK_ID)
    REFERENCES TRACKS (TRACK_ID);

ALTER TABLE MEMBERSHIP_BILLING ADD CONSTRAINT FK_MEMBERSHIP_BILLING_MEMBERSHIP
    FOREIGN KEY (MEMBERSHIP_ID)
    REFERENCES MEMBERSHIP (MEMBERSHIP_ID);

ALTER TABLE MEMBERSHIP_BILLING ADD CONSTRAINT FK_MEMBERSHIP_BILLING_CUSTOMER
    FOREIGN KEY (CUSTOMER_ID)
    REFERENCES MUSIC_CUSTOMERS (CUSTOMER_ID);




